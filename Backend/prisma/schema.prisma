generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  authId    String   @unique
  reviews   Review[]
  role      Role     @default(USER)
  createdAt DateTime @default(now())
}

model Teacher {
  id                   String             @id @default(uuid())
  name                 String          @unique
  courses              TeacherCourse[]
  reviews              Review[]
  TotalReviews         Float?           @default(0.0)
  TotalGrading_Review  Float?          @default(0.0)
  TotalTeaching_Review Float?          @default(0.0)
  TotalWorkload_Review Float?          @default(0.0)
  TotalAttendance_Review Float?        @default(0.0)

  approved             Boolean         @default(false)
  createdAt            DateTime        @default(now())
}

model Course {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  teachers  TeacherCourse[]
  createdAt DateTime        @default(now())
}

//  Many-to-Many Join Table
model TeacherCourse {
  teacherId String
  courseId  Int

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([teacherId, courseId])
}

model Review {
  id        Int  @id @default(autoincrement())
  userId    Int
  teacherId String
  grading   Int? @default(0)
  teaching  Int? @default(0)
  workload  Int? @default(0)
  Attendance Int? @default(0)
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([userId, teacherId])
}

enum Role {
  USER
  ADMIN
}
